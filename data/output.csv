Problem,Prompt Strategy,Prompt,Model 1: OpenAI GPT-4,Model 2: Mistral Large,Model 3: Meta Llama 3.1 405B
Code Summarization (Java) Summarize the functionality of the following method:,chain of thought,"Summarize the following Java method. Let's think step-by-step. Here's the code: public Map<String, Integer> countWordFrequency(List<String> words) { Map<String, Integer> freqMap = new HashMap<>(); for (String word : words) { freqMap.put(word, freqMap.getOrDefault(word, 0) + 1); } return freqMap; }",,,
Code Summarization (Java) Summarize the functionality of the following method:,"few shot ","Example 1:
Input:
'''public int sumList(List<Integer> nums) {
    int sum = 0;
    for (int n : nums) {
        sum += n;
    }
    return sum;
}
'''
Output: 
""This method returns the sum of all integers in the input list.""

Example 2: 
Input:
```
public boolean containsNegative(List<Integer> nums) {
    for (int n : nums) {
        if (n < 0) return true;
    }
    return false;
}
```
Output:
""This method checks if the input list contains any negative numbers.""

Now, summarize the following Java method. Here's the code: public Map<String, Integer> countWordFrequency(List<String> words) { Map<String, Integer> freqMap = new HashMap<>(); for (String word : words) { freqMap.put(word, freqMap.getOrDefault(word, 0) + 1); } return freqMap; }",,,
Bug Fixing (Python - Off-by-One) Identify and fix the off-by-one error in this function:,prompt chaining,"Prompt 1: Identify the off-by-one bug in this Python function. Here's the code:  

Prompt 2: Now, fix the bug in the following function. def sum_range(start, end): total=0 for i in range(start, end): total += i return total",,,
Bug Fixing (Python - Off-by-One) Identify and fix the off-by-one error in this function:,chain of thought,"Fix the off-by-one bug in this Python function. Let's think step-by-step. Here's the code: def sum_range(start, end): total=0 for i in range(start, end): total += i return total",,,
Bug Classification (C++) Classify the type of bug in the following C++ function:,few shot,"Example 1:
Input:
void copyArray(int* dest, int* src, int size) {
    for (int i = 0; i <= size; i++) {
        dest[i] = src[i];
    }
}

Bug Type: Off-by-One Error (Buffer Overflow)


Example 2:
Input: 
int calculateSum(int a, int b) {
    int sum;
    return sum;
}
Bug Type: Uninitialized Variable

Now, classify the type of bug in the C++ function. Here's the code: int* getArray(int size) { int arr[size]; return arr; }",,,
Bug Classification (C++) Classify the type of bug in the following C++ function:,chain of thought,Classify the type of bug in the C++ function. Let's think step-by-step. Here's the code: int* getArray(int size) { int arr[size]; return arr; },,,
Generating Email Validators (Python + Regex) Complete the function using regex to validate basic email addresses:,few shot,"Example 1:
Input: ""user@example.com""
Output: valid

Example 2:
Input: ""invalid-email@""
Output: invalid

Example 3:
Input: ""john.doe@company.org""
Output: valid

Example 4:
Input: ""noatsign.com""
Output: invalid

Now complete the Python function using regex to validate basic email addresses. Here's the code: def is_valid_email(email): # TODO: Complete using regex pass",,,
Generating Email Validators (Python + Regex) Complete the function using regex to validate basic email addresses:,"self-consistency ",Complete the Python function using regex to validate basic email addresses. Here's the code: def is_valid_email(email): # TODO: Complete using regex pass,,,
Generating Flask APIs (Python) Create a '/greet/<username>' endpoint that returns a JSON greeting:,zero shot,"Complete the Flask API Python function with an endpoint that returns a JSON greeting. Here's the code: from flask import Flask, jsonify app = Flask(__name__) @app.route('/greet/<username>') def greet(username): # TODO: Return a JSON greeting pass",,,
Generating Flask APIs (Python) Create a '/greet/<username>' endpoint that returns a JSON greeting:,chain of thought,"Complete the Flask API Python function with an endpoint that returns a JSON greeting. Let's think step-by-step. Here's the code: from flask import Flask, jsonify app = Flask(__name__) @app.route('/greet/<username>') def greet(username): # TODO: Return a JSON greeting pass",,,
"SQL Schema Design (SQL) Write the schema for a review app with users, books, and reviews:",prompt chaining,"Prompt 1: You will be writing the schema for a review app with users, books, and reviews. Understand the types of data you'll be storing, their relationships, and any constraints. Here's the code:  

Prompt 2: Choose a database model for the data(e.g., relational, object-relational, etc.)

Prompt 3: Create an Entity-Relationship model with the data. 

Prompt 4: Eliminate redundancy and ensure data integrity by applying normalization rules. 

Prompt 5: Define each table, its columns, data types, and constraints

Prompt 6: Establish relationships between tables. 

Prompt 7: Test the schema with sample data, identify and fix any issues, and iterate on the design-- Tables: users(id, name), books(id, title), reviews(id, user_id, book_id, rating)",,,
"SQL Schema Design (SQL) Write the schema for a review app with users, books, and reviews:",chain of thought,"Write the schema for a review app with users, books, and reviews. Let's think step by step. Here's the code: -- Tables: users(id, name), books(id, title), reviews(id, user_id, book_id, rating)",,,
Null Dereference Detection (Java) Identify any null dereference risk:,zero shot,Identify any null dereference risk in the Java function. Here's the code:public int getLength(String s) { return s.length(); },,,
Null Dereference Detection (Java) Identify any null dereference risk:,"self-consistency ",Identify any null dereference risk in the Java function. Here's the code:public int getLength(String s) { return s.length(); },,,
CSV Parser Variants (Python) Improve the parser to support quoted fields:,few shot,"Example 1:
Input: 'John,Doe,""123, Elm Street"",Engineer'
Output: ['John', 'Doe', '123, Elm Street', 'Engineer']

Example 2:
Input: '""Jane, A."",Smith,""456 Oak Avenue"",Doctor'
Output: ['Jane, A.', 'Smith', '456 Oak Avenue', 'Doctor']

Example 3:
Input: 'Alice,Brown,""789 Pine St, Apt 4B"",""Data Scientist""'
Output: ['Alice', 'Brown', '789 Pine St, Apt 4B', 'Data Scientist']

Now, improve the Python parser function to handle quoted fields in CSV lines. Quoted fields may contain commas, which should not be split. Here's the code:def parse_csv_line(line): return line.split(',')",,,
CSV Parser Variants (Python) Improve the parser to support quoted fields:,"self-consistency ","Improve the parser to support quoted fields. Here's the code:def parse_csv_line(line): return line.split(',')",,,
Data Class to API Conversion (Kotlin) Convert the data class to a REST API using Ktor:,few shot,"Example 1:
Input:
data class Book(val id: Int, val title: String, val author: String)

Output:
routing {
    route(""/books"") {
        get { call.respond(books) }
        get(""{id}"") { 
            val id = call.parameters[""id""]?.toIntOrNull()
            books.find { it.id == id }?.let { call.respond(it) } ?: call.respond(HttpStatusCode.NotFound)
        }
        post { books.add(call.receive<Book>()); call.respond(HttpStatusCode.Created) }
        put(""{id}"") { 
            val id = call.parameters[""id""]?.toIntOrNull()
            val index = books.indexOfFirst { it.id == id }
            if (index != -1) books[index] = call.receive() else call.respond(HttpStatusCode.NotFound)
        }
        delete(""{id}"") { 
            if (books.removeIf { it.id == call.parameters[""id""]?.toIntOrNull() }) call.respond(HttpStatusCode.NoContent) 
            else call.respond(HttpStatusCode.NotFound)
        }
    }
}

Example 2:
Input:
data class User(val id: Int, val name: String, val email: String)

Output:
routing {
    route(""/users"") {
        get { call.respond(users) }
        get(""{id}"") { 
            users.find { it.id == call.parameters[""id""]?.toIntOrNull() }?.let { call.respond(it) } 
                ?: call.respond(HttpStatusCode.NotFound)
        }
        post { users.add(call.receive<User>()); call.respond(HttpStatusCode.Created) }
        put(""{id}"") { 
            users.indexOfFirst { it.id == call.parameters[""id""]?.toIntOrNull() }.let { index ->
                if (index != -1) users[index] = call.receive() else call.respond(HttpStatusCode.NotFound)
            }
        }
        delete(""{id}"") { 
            if (users.removeIf { it.id == call.parameters[""id""]?.toIntOrNull() }) call.respond(HttpStatusCode.NoContent)
            else call.respond(HttpStatusCode.NotFound)
        }
    }
}

Now, convert the Kotlin data class to a REST API using Ktor with CRUD operations. Here's the code:data class Product(val id: Int, val name: String, val price: Double)",,,
Data Class to API Conversion (Kotlin) Convert the data class to a REST API using Ktor:,prompt chaining,"Prompt 1: Given the following Kotlin data class, summarize its fields and their types. Here's the code: 

Prompt 2: Based on the fields and purpose of the data class, list the REST API endpoints required to perform CRUD (Create, Read, Update, Delete) operations. Use the following format: Endpoint: [HTTP Method] [Path] â€“ [Description].

Prompt 3: Using the list of endpoints above, generate Ktor route stubs in Kotlin. Each stub should include the HTTP method, path, and a placeholder for the handler logic.

Prompt 4: For each route stub, implement the handler logic using an in-memory list to store Book objects. Show how to add, retrieve, update, and delete books in this list.

Prompt 5: Combine the data class, in-memory storage, and all route handlers into a complete Ktor application file. Ensure the application is runnable and includes all necessary imports and setup code.data class Product(val id: Int, val name: String, val price: Double)",,,
Function Summarization (Python) Write a brief summary of the function:,zero shot,"Write a brief summary of the function. Here's the code:def reverse_words(sentence): return ', '.join(sentence.split()[::-1])",,,
Function Summarization (Python) Write a brief summary of the function:,chain of thought,"Write a brief summary of the Python function. Let's think step-by-step. Here's the code:def reverse_words(sentence): return ', '.join(sentence.split()[::-1])",,,
Prompt from Code Comments (Python) Write a prompt that could generate the code:,self-consistency,"Write a prompt that could generate the code. Here's the code:# This function checks if a number is prime def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5)+1): if n % i == 0: return False return True",,,
Prompt from Code Comments (Python) Write a prompt that could generate the code:,chain of thought,"Write a prompt that could generate the following code. Let's think step-by-step. Here's the code:# This function checks if a number is prime def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5)+1): if n % i == 0: return False return True",,,
Fixing Factorial Bug (Python) Fix the bug when input is 0:,prompt chaining,"Prompt 1: Identify the bug in this Python function. Here's the code:  

Prompt 2: Now fix the bug when the input is 0.def factorial(n): result = 1 for i in range(1, n): result *= i return result",,,
Fixing Factorial Bug (Python) Fix the bug when input is 0:,"self-consistency ","Fix the bug when input is 0. Here's the code:def factorial(n): result = 1 for i in range(1, n): result *= i return result",,,
Linked List Node Deletion (C) Implement node deletion by value:,chain of thought,"Implement node deletion by value. Let's think step-by-step. Here's the code:struct Node { int data; struct Node* next; }; void deleteNode(struct Node** head, int key) { // TODO: Implement node deletion }",,,
Linked List Node Deletion (C) Implement node deletion by value:,"self-consistency ","Implement node deletion by value. Here's the code:struct Node { int data; struct Node* next; }; void deleteNode(struct Node** head, int key) { // TODO: Implement node deletion }",,,
Recursive Function Completion (Python) Complete the recursive function for Fibonacci:,chain of thought,Complete the recursive function for Fibonacci. Let's think step-by-step. Here's the code:def fibonacci(n): # TODO: Base cases and recursive call pass,,,
Recursive Function Completion (Python) Complete the recursive function for Fibonacci:,"self-consistency ","Complete the recursive function for Fibonacci. Here's the code:
def fibonacci(n): # TODO: Base cases and recursive call pass",,,
Constructor Completion (Python) Complete the class constructor:,zero shot,"Complete the class constructor to initialize the name, age, and optional email attributes. Here's the code:class Person: def __init__(self): # TODO: Add name, age, and optional email pass",,,
Constructor Completion (Python) Complete the class constructor:,"few shot ","Example 1:
Input: 
class Dog: def __init__(self): # TODO: Add breed and age pass

Output: 
class Dog:
    def __init__(self, breed, age):
        self.breed = breed
        self.age = age

Example 2:
Input: 
class Car: def __init__(self): # TODO: Add make and year pass

Output: 
class Car:
    def __init__(self, make, year):
        self.make = make
        self.year = year

Now, complete the class constructor to initialize the name, age, and optional email attributes. Here's the code:class Person: def __init__(self): # TODO: Add name, age, and optional email pass",,,
Binary Search Completion (Java) Complete the binary search implementation:,chain of thought,"Complete the binary search implementation. Let's think step-by-step. Here's the code: public int binarySearch(int[] arr, int target) { int left = 0, right = arr.length - 1; while (left <= right) { int mid = (left + right) / 2; // TODO: Compare and adjust bounds } return -1; }",,,
Binary Search Completion (Java) Complete the binary search implementation:,"zero shot ","Complete the binary search implementation. Here's the code: public int binarySearch(int[] arr, int target) { int left = 0, right = arr.length - 1; while (left <= right) { int mid = (left + right) / 2; // TODO: Compare and adjust bounds } return -1; }",,,
Self-Consistency Bug Fixing (C++) Resolve inconsistency between function name and logic:,self-consistency,Resolve inconsistency between function name and logic. Here's the code:// Supposed to return true if x is even bool isOdd(int x) { return x % 2 == 0; },,,
Self-Consistency Bug Fixing (C++) Resolve inconsistency between function name and logic:,chain of thought,Resolve the inconsistency bewteen function name and logic. Let's think step by step. Here's the code: // Supposed to return true if x is even bool isOdd(int x) { return x % 2 == 0; },,,
Prompt Chaining: Bug Identification -> Fix (JavaScript) Identify and fix the bug:,prompt chaining,"Step 1: Identify the bug. Here's the code: 

Step 2: Fix it to return n % 2 === 0.function isEven(n) { return n % 2; }",,,
Prompt Chaining: Bug Identification -> Fix (JavaScript) Identify and fix the bug:,chain of thought,Identify and fix the bug in the function. Let's think step by step. Here's the code: function isEven(n) { return n % 2; },,,
Summary Decomposition (C++) Decompose the high-level comment/summary into logical steps:,chain of thought,"Decompose the high-level comment and summary into logical steps. Let's think step by step. Here's the code: // Function that validates an input, calculates square, and returns result int process(int x) { if (x < 0) return -1; return x * x; }",,,
Summary Decomposition (C++) Decompose the high-level comment/summary into logical steps:,"few shot ","Example 1:
Input: 
Function that adds two numbers and returns the result
int add(int a, int b) {
    return a + b;
}

Output: 
1. Receive two numbers as input.
2. Add the numbers.
3. Return the result.

Example 2:
Input: 
Function that checks if a number is even
bool isEven(int x) {
    return x % 2 == 0;
}
Output:
1. Receive a number as input.
2. Check if it is divisible by 2.
3. Return true if divisible, false otherwise.

Decompose the high-level comment and summary into logical steps. Here's the code: // Function that validates an input, calculates square, and returns result int process(int x) { if (x < 0) return -1; return x * x; }",,,
Purpose Inference -> Completion (Python) Complete the function based on intent:,zero shot,Complete the function to return the average of scores. Here's the code:def calculate_average(scores): total = 0 # TODO: Complete to return average pass,,,
Purpose Inference -> Completion (Python) Complete the function based on intent:,chain of thought,Complete the function to return the average of scores. Let's think step by step. Here's the code:def calculate_average(scores): total = 0 # TODO: Complete to return average pass,,,
Full-File Bug Detection and Refactoring (Python) Analyze and refactor this utility script for better readability and correctness:,prompt chaining,"Step 1: Identify the issues in this python function. Here's the code
Step 2: Refactor the code for better readability and correctness# utils.py - Script to parse and summarize numeric CSV files import csv def read_csv(filepath): with open(filepath, 'r') as f: return [row for row in csv.reader(f)] def summarize_column(data, index): values = [float(row[index]) for row in data[1:]] total = sum(values) avg = total / len(values) return total, avg def main(): filepath = 'data.csv' data = read_csv(filepath) total, avg = summarize_column(data, 1) print('Total:', total) print('Average:', avg) if __name__ == '__main__': main()",,,
Full-File Bug Detection and Refactoring (Python) Analyze and refactor this utility script for better readability and correctness:,"self-consistency ","Analyze and refactor this utility script for better readability and correctness. Here's the code: # utils.py - Script to parse and summarize numeric CSV files import csv def read_csv(filepath): with open(filepath, 'r') as f: return [row for row in csv.reader(f)] def summarize_column(data, index): values = [float(row[index]) for row in data[1:]] total = sum(values) avg = total / len(values) return total, avg def main(): filepath = 'data.csv' data = read_csv(filepath) total, avg = summarize_column(data, 1) print('Total:', total) print('Average:', avg) if __name__ == '__main__': main()",,,
Code Completion and Robustness Enhancement (Python) Complete this file-processing script to clean lines and count word frequencies correctly:,chain of thought,"Complete this file-processing script to clean lines and count word frequencies correctly. Let's think step by step. Here's the code:# file_processor.py - Incomplete script for processing text files import string def load_file(filepath): with open(filepath, 'r') as f: return f.readlines() def clean_line(line): # TODO: Remove punctuation and make lowercase pass def count_words(lines): word_counts = {} for line in lines: clean = clean_line(line) for word in clean.split(): word_counts[word] = word_counts.get(word, 0) + 1 return word_counts def main(): filepath = 'input.txt' lines = load_file(filepath) counts = count_words(lines) for word, count in sorted(counts.items()): print(f'{word}: {count}') if __name__ == '__main__': main()",,,
Code Completion and Robustness Enhancement (Python) Complete this file-processing script to clean lines and count word frequencies correctly:,"self-consistency ","Complete this file-processing script to clean lines and count word frequencies correctly. Here's the code:# file_processor.py - Incomplete script for processing text files import string def load_file(filepath): with open(filepath, 'r') as f: return f.readlines() def clean_line(line): # TODO: Remove punctuation and make lowercase pass def count_words(lines): word_counts = {} for line in lines: clean = clean_line(line) for word in clean.split(): word_counts[word] = word_counts.get(word, 0) + 1 return word_counts def main(): filepath = 'input.txt' lines = load_file(filepath) counts = count_words(lines) for word, count in sorted(counts.items()): print(f'{word}: {count}') if __name__ == '__main__': main()",,,
